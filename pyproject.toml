[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "authx"
version = "0.1.0"
description = "AuthX - Multi-tenant Authentication and Authorization Service"
authors = [
    {name = "AuthX Team", email = "team@authx.com"},
]
dependencies = [
    # Core FastAPI stack
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",

    # Database (async)
    "sqlalchemy>=2.0.23",
    "alembic>=1.12.1",
    "asyncpg>=0.29.0",

    # Data validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "email-validator>=2.1.0",

    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "argon2-cffi>=23.1.0",
    "cryptography>=41.0.7",
    "python-multipart>=0.0.6",
    "itsdangerous>=2.1.0",

    # Redis & Caching
    "redis>=5.0.0",
    "aioredis>=2.0.1",

    # Google Maps API
    "googlemaps>=4.10.0",

    # HTTP client
    "httpx>=0.25.0",

    # Email
    "aiosmtplib>=3.0.1",
    "jinja2>=3.1.6",

    # Monitoring & Metrics
    "prometheus-client>=0.19.0",
    "prometheus-fastapi-instrumentator>=6.1.0",
    "structlog>=23.2.0",

    # Configuration
    "python-dotenv>=1.0.0",

    # Background tasks
    "celery>=5.3.0",

    # Utils
    "psutil>=5.9.0",
]
requires-python = ">=3.11"

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.4.1",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.4.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",

    # Code quality
    "black>=23.11.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=90",
]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | \.tox
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "authx_sdk"]

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "migrations",
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "googlemaps.*",
    "celery.*",
    "prometheus_client.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
