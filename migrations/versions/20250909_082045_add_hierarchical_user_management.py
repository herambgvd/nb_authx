"""add_hierarchical_user_management

Revision ID: 6c6ff43fd984
Revises: 4b602396a06c
Create Date: 2025-09-09 08:20:45.711434+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6c6ff43fd984'
down_revision = '4b602396a06c'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('admins',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('admin_level', sa.String(length=50), nullable=False),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_admins_id'), 'admins', ['id'], unique=False)
    op.create_index(op.f('ix_admins_organization_id'), 'admins', ['organization_id'], unique=False)
    op.create_index(op.f('ix_admins_user_id'), 'admins', ['user_id'], unique=True)
    op.create_table('user_location_accesses',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('location_id', sa.UUID(), nullable=False),
    sa.Column('can_read', sa.Boolean(), nullable=False),
    sa.Column('can_write', sa.Boolean(), nullable=False),
    sa.Column('can_delete', sa.Boolean(), nullable=False),
    sa.Column('can_manage', sa.Boolean(), nullable=False),
    sa.Column('access_granted_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('access_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('granted_by', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['granted_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_location_accesses_granted_by'), 'user_location_accesses', ['granted_by'], unique=False)
    op.create_index(op.f('ix_user_location_accesses_id'), 'user_location_accesses', ['id'], unique=False)
    op.create_index(op.f('ix_user_location_accesses_location_id'), 'user_location_accesses', ['location_id'], unique=False)
    op.create_index(op.f('ix_user_location_accesses_organization_id'), 'user_location_accesses', ['organization_id'], unique=False)
    op.create_index(op.f('ix_user_location_accesses_user_id'), 'user_location_accesses', ['user_id'], unique=False)
    op.create_table('user_roles',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.drop_index(op.f('ix_user_impersonations_admin_user_id'), table_name='user_impersonations')
    op.drop_index(op.f('ix_user_impersonations_id'), table_name='user_impersonations')
    op.drop_index(op.f('ix_user_impersonations_session_token'), table_name='user_impersonations')
    op.drop_index(op.f('ix_user_impersonations_target_user_id'), table_name='user_impersonations')
    op.drop_table('user_impersonations')
    op.drop_index(op.f('ix_maintenance_windows_id'), table_name='maintenance_windows')
    op.drop_table('maintenance_windows')
    op.drop_index(op.f('ix_platform_metrics_id'), table_name='platform_metrics')
    op.drop_index(op.f('ix_platform_metrics_metric_name'), table_name='platform_metrics')
    op.drop_table('platform_metrics')
    op.drop_index(op.f('ix_system_alerts_alert_type'), table_name='system_alerts')
    op.drop_index(op.f('ix_system_alerts_id'), table_name='system_alerts')
    op.drop_index(op.f('ix_system_alerts_severity'), table_name='system_alerts')
    op.drop_table('system_alerts')
    op.add_column('licenses', sa.Column('max_locations', sa.Integer(), nullable=False))
    op.add_column('licenses', sa.Column('valid_from', sa.DateTime(timezone=True), nullable=False))
    op.add_column('licenses', sa.Column('valid_until', sa.DateTime(timezone=True), nullable=False))
    op.add_column('licenses', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('licenses', sa.Column('created_by', sa.UUID(), nullable=True))
    op.add_column('licenses', sa.Column('updated_by', sa.UUID(), nullable=True))
    op.alter_column('licenses', 'max_users',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('licenses', 'features',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True)
    op.create_foreign_key(None, 'licenses', 'users', ['created_by'], ['id'])
    op.create_foreign_key(None, 'licenses', 'users', ['updated_by'], ['id'])
    op.drop_column('licenses', 'status')
    op.drop_column('licenses', 'license_metadata')
    op.drop_column('licenses', 'issued_at')
    op.drop_column('licenses', 'max_organizations')
    op.drop_column('licenses', 'expires_at')
    op.drop_column('licenses', 'activated_at')
    op.add_column('organizations', sa.Column('domain', sa.String(length=255), nullable=True))
    op.create_index(op.f('ix_organizations_domain'), 'organizations', ['domain'], unique=False)
    op.drop_column('permissions', 'metadata_config')
    op.drop_column('permissions', 'is_active')
    op.drop_index(op.f('ix_roles_user_id'), table_name='roles')
    op.drop_constraint(op.f('roles_user_id_fkey'), 'roles', type_='foreignkey')
    op.drop_column('roles', 'user_id')

    # Add the new column with a default value first
    op.add_column('users', sa.Column('is_organization_admin', sa.Boolean(), nullable=False, server_default='false'))

    # Remove the server default after adding the column
    op.alter_column('users', 'is_organization_admin', server_default=None)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'is_organization_admin')
    op.add_column('roles', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('roles_user_id_fkey'), 'roles', 'users', ['user_id'], ['id'])
    op.create_index(op.f('ix_roles_user_id'), 'roles', ['user_id'], unique=False)
    op.add_column('permissions', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('permissions', sa.Column('metadata_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_organizations_domain'), table_name='organizations')
    op.drop_column('organizations', 'domain')
    op.add_column('licenses', sa.Column('activated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('licenses', sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('licenses', sa.Column('max_organizations', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('licenses', sa.Column('issued_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False))
    op.add_column('licenses', sa.Column('license_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('licenses', sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'licenses', type_='foreignkey')
    op.drop_constraint(None, 'licenses', type_='foreignkey')
    op.alter_column('licenses', 'features',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False)
    op.alter_column('licenses', 'max_users',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('licenses', 'updated_by')
    op.drop_column('licenses', 'created_by')
    op.drop_column('licenses', 'is_active')
    op.drop_column('licenses', 'valid_until')
    op.drop_column('licenses', 'valid_from')
    op.drop_column('licenses', 'max_locations')
    op.create_table('system_alerts',
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('alert_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('target_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('target_ids', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_dismissible', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('auto_dismiss_after', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('starts_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('ends_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('system_alerts_created_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('system_alerts_pkey'))
    )
    op.create_index(op.f('ix_system_alerts_severity'), 'system_alerts', ['severity'], unique=False)
    op.create_index(op.f('ix_system_alerts_id'), 'system_alerts', ['id'], unique=False)
    op.create_index(op.f('ix_system_alerts_alert_type'), 'system_alerts', ['alert_type'], unique=False)
    op.create_table('platform_metrics',
    sa.Column('metric_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('metric_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('dimensions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('recorded_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_metrics_pkey'))
    )
    op.create_index(op.f('ix_platform_metrics_metric_name'), 'platform_metrics', ['metric_name'], unique=False)
    op.create_index(op.f('ix_platform_metrics_id'), 'platform_metrics', ['id'], unique=False)
    op.create_table('maintenance_windows',
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('maintenance_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('starts_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('ends_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('estimated_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('affected_services', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('notify_users', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('notification_sent_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('maintenance_windows_created_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('maintenance_windows_pkey'))
    )
    op.create_index(op.f('ix_maintenance_windows_id'), 'maintenance_windows', ['id'], unique=False)
    op.create_table('user_impersonations',
    sa.Column('admin_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('target_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('session_token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('ended_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['admin_user_id'], ['users.id'], name=op.f('user_impersonations_admin_user_id_fkey')),
    sa.ForeignKeyConstraint(['target_user_id'], ['users.id'], name=op.f('user_impersonations_target_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_impersonations_pkey'))
    )
    op.create_index(op.f('ix_user_impersonations_target_user_id'), 'user_impersonations', ['target_user_id'], unique=False)
    op.create_index(op.f('ix_user_impersonations_session_token'), 'user_impersonations', ['session_token'], unique=True)
    op.create_index(op.f('ix_user_impersonations_id'), 'user_impersonations', ['id'], unique=False)
    op.create_index(op.f('ix_user_impersonations_admin_user_id'), 'user_impersonations', ['admin_user_id'], unique=False)
    op.drop_table('user_roles')
    op.drop_index(op.f('ix_user_location_accesses_user_id'), table_name='user_location_accesses')
    op.drop_index(op.f('ix_user_location_accesses_organization_id'), table_name='user_location_accesses')
    op.drop_index(op.f('ix_user_location_accesses_location_id'), table_name='user_location_accesses')
    op.drop_index(op.f('ix_user_location_accesses_id'), table_name='user_location_accesses')
    op.drop_index(op.f('ix_user_location_accesses_granted_by'), table_name='user_location_accesses')
    op.drop_table('user_location_accesses')
    op.drop_index(op.f('ix_admins_user_id'), table_name='admins')
    op.drop_index(op.f('ix_admins_organization_id'), table_name='admins')
    op.drop_index(op.f('ix_admins_id'), table_name='admins')
    op.drop_table('admins')
    # ### end Alembic commands ###
